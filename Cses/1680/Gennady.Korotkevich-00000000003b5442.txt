/**
 *    author:  tourist
 *    created: 08.08.2020 18:58:21       
**/
#include <bits/stdc++.h>

using namespace std;

template <typename A, typename B>
string to_string(pair<A, B> p);

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string& s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}

template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const long long MAX = (long long) 360 * (long long) 1e9;
const long double pi = acos((long double) -1.0);
const long double q = pi / MAX;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int tt;
  cin >> tt;
  for (int qq = 1; qq <= tt; qq++) {
    cout << "Case #" << qq << ": ";
    int n, r, k;
    cin >> n >> r >> k;
    assert(k == 1);
    vector<long long> d(2 * n);
    vector<long long> l(2 * n);
    for (int i = 0; i < n; i++) {
      cin >> d[i] >> l[i];
      d[i + n] = d[i] + MAX;
      l[i + n] = l[i];
    }
    long double ans = 0;
    auto Test = [&](int i, int j) {
      long long diff = abs(d[i] - d[j]);
      if (diff >= MAX) {
        diff -= MAX;
      }
      long double dd = (long double) diff * q;
//      debug(i, j, diff, l[i], l[j], sin(dd) * 2 * r);
      ans = max(ans, sin(dd) * 2 * r + l[i] + l[j]);
    };
    vector<int> st;
    int beg = 0;
    int i = 0;
    int j = 0;
    while (j < n) {
      if (i < 2 * n && d[i] <= d[j] + MAX / 2) {
        // add i
        while (beg < (int) st.size() && l[st.back()] <= l[i]) {
          st.pop_back();
        }
        st.push_back(i);
        ++i;
      } else {
        // test j
        while (beg < (int) st.size() && st[beg] <= j) {
          ++beg;
        }
        for (int t = beg; t < (int) st.size(); t++) {
          Test(j, st[t]);
        }
        ++j;
      }
    }
    cout << fixed << setprecision(17) << ans << '\n';
  }
  return 0;
}
